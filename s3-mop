#!/usr/bin/env python

import argparse
import logging
import re
import sys
import time

import boto3
import inquirer
from botocore.exceptions import ClientError, CredentialRetrievalError


def parse_args():
    parser = argparse.ArgumentParser(
        description="Delete multiple S3 buckets including all the objects and versions in the bucket."
    )
    parser.add_argument(
        "--profile",
        type=str,
        help="AWS profile to be used.",
    )
    return parser.parse_args()


def session(profile):
    try:
        conn = boto3.Session(profile_name=profile)
        s3_client = conn.client("s3")
        s3_resource = conn.resource("s3")
        return s3_client, s3_resource
    except CredentialRetrievalError as e:
        logging.error(e)


def get_buckets(s3_client):
    buckets = []
    response = s3_client.list_buckets()
    for bucket in response["Buckets"]:
        buckets.append(bucket["Name"])
    return buckets


def inquiry(buckets):
    questions = [
        inquirer.Checkbox(
            "buckets",
            message="Which buckets are you going to delete?",
            choices=buckets,
        ),
        inquirer.Text(
            "confirm",
            message="Are you sure you want to delete the buckets? Type 'delete' to confirm your actions",
            validate=lambda _, x: re.match("^delete$", x),
        ),
    ]
    answer = inquirer.prompt(questions)
    print(answer)
    return answer


def main():
    args = parse_args()
    profile = args.profile
    s3_client, s3_resource = session(profile)
    buckets = get_buckets(s3_client)
    answer = inquiry(buckets)
    try:
        if len(answer["buckets"]) > 0 and answer["confirm"] == "delete":
            for bucket in answer["buckets"]:
                print(f"deleting objects in bucket {bucket}...")
                content = s3_client.list_objects(Bucket=bucket)
                if "Contents" in content and len(content["Contents"]) > 0:
                    objects = [{"Key": obj["Key"]} for obj in content["Contents"]]
                    s3_client.delete_objects(Bucket=bucket, Delete={"Objects": objects})
                    time.sleep(3)

                print(f"removing object versions...")
                versions = s3_client.list_object_versions(Bucket=bucket)
                if "Versions" in versions and len(versions["Versions"]) > 0:
                    s3_bucket = s3_resource.Bucket(bucket)
                    s3_bucket.object_versions.delete()
                    time.sleep(1)

                print(f"deleting bucket {bucket}...")
                s3_client.delete_bucket(Bucket=bucket)
                time.sleep(3)
    except (TypeError, ClientError) as e:
        logging.error(e)
        sys.exit(0)


if __name__ == "__main__":
    main()
